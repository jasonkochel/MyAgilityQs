AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: MyAgilityQs API

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        CORS_ORIGIN: !Ref CorsOrigin

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production

  CorsOrigin:
    Type: String
    Default: http://localhost:5173
    Description: CORS origin for the frontend

Conditions:
  IsProduction: !Equals [!Ref Environment, production]

Resources:
  MyAgilityQsApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: "MyAgilityQs API - CORS disabled for testing"
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "MyAgilityQs${Suffix}"
        - Suffix: !If [IsProduction, "", "-Dev"]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: MyAgilityQs
        - Key: Environment
          Value: !Ref Environment

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: index.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-east-1_808uxrU8E"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt DynamoTable.Arn
                - !Sub "${DynamoTable.Arn}/index/*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: us-east-1_808uxrU8E
          COGNITO_CLIENT_ID: 31rckg6cckn32b8fsil5blhh4t
          # Note: No client secret needed for React app (public client)
          COGNITO_REGION: us-east-1
          CORS_ORIGIN: !Ref CorsOrigin
          NODE_ENV: !Ref Environment
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyAgilityQsApi
            Path: /{proxy+}
            Method: ANY

Outputs:
  ApiUrl:
    Description: "HTTP API Gateway endpoint URL"
    Value: !Sub "https://${MyAgilityQsApi}.execute-api.${AWS::Region}.amazonaws.com/"

  ApiFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt ApiFunction.Arn

  DynamoTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref DynamoTable

  DynamoTableArn:
    Description: "DynamoDB Table ARN"
    Value: !GetAtt DynamoTable.Arn
